#!/usr/bin/bash

. ${HOME}/lib/set_env.sh
. ${HOME}/lib/common.sh


#creating the landing table
bq load --replace=true --source_format=CSV --quote='' --field_delimiter='\t' \
        --schema=${schema_path}/edl_landing/ann_sap_exchrate.json \
        edl_landing.ann_sap_exchrate \
        "gs://${default_bucket}/pre/sapd/ANN_SAP_EXCHRATE_*.dat"
rc_check $? "Load edl_landing"


#loading the temporary table in staging (it has both new and updated records)
bq query  --max_rows 1 --allow_large_results --destination_table edl_stage.ann_sap_exchrate_new --use_legacy_sql=false <<!
SELECT  
 substr(c.sap_exchrate_src,1,4) as kurst_curr
,substr(c.sap_exchrate_src,5,5) as fcurr_curr
,substr(c.sap_exchrate_src,10,5) as tcurr_curr
,substr(c.sap_exchrate_src,15,8) as gdatu_inv
,substr(c.sap_exchrate_src,23,10) as ukurs_curr
,cast (substr(c.sap_exchrate_src,33,9) as numeric) as ffact_curr
,cast( substr(c.sap_exchrate_src,42,9) as numeric) as tfact_curr    
,c.batch_id
from edl_landing.ann_sap_exchrate c
!
rc_check $? "Load incremental data from edl_landing into temp table"


#append the old records into the temporary table
bq query  --max_rows 1 --allow_large_results --append_table --destination_table edl_stage.ann_sap_exchrate_new --use_legacy_sql=false <<!
select c.*
from edl_stage.pre_sap_exchrate c
left join edl_stage.ann_sap_exchrate_new w
    on  w.gdatu_inv = c.gdatu_inv 
    and w.fcurr_curr = c.fcurr_curr
    and w.batch_id = c.batch_id
where w.gdatu_inv is null
!
rc_check $? "append legacy records into the temp table"


#cleansing and archival
bq cp --force edl_stage.pre_sap_exchrate edl_archive.pre_sap_exchrate
rc_check $? "archive copy"
bq cp --force edl_stage.ann_sap_exchrate_new edl_stage.pre_sap_exchrate
rc_check $? "replace the temp table as the stage table"
bq rm --force edl_stage.ann_sap_exchrate_new
rc_check $? "drop the temp table"

#This function is only stubbed in â€“ it runs but currently does not archive your files
archive_bucket_files "gs://${default_bucket}/pre/sapd/ANN_SAP_EXCHRATE_*.dat"
