#!/usr/bin/bash

. ${HOME}/lib/set_env.sh
. ${HOME}/lib/common.sh

#creating the landing table
bq load --replace=true --source_format=CSV --skip_leading_rows=1 --field_delimiter="|" --quote="" \
        --schema=${schema_path}/edl_landing/lbca_sales_transaction_notes.json \
        edl_landing.lb_sales_transaction_notes  \
        "gs://${default_bucket}/plus/edw/lb_sales_transaction_notes*.txt.gz"
rc_check $? "Load edl_landing for LB"

bq query --replace=true --max_rows 1 --allow_large_results --destination_table edl_stage.lbca_sales_transaction_notes_new --use_legacy_sql=false <<!
SELECT
stg.notes_seq_nbr
,stg.note_type_desc
,stg.free_form_note_desc
,stg.selling_chain_nbr
,stg.selling_store_nbr
,stg.register_nbr
,stg.transaction_nbr
,stg.transaction_dt
,stg.transaction_tm
,stg.detail_fee_seq_nbr
,stg.detail_fee_ind
,stg.cashier_nbr
,stg.record_seq_nbr
,stg.note_type_cd
,stg.last_update_ts
,stg.extract_ts
from 
(SELECT lbca.*
,ROW_NUMBER() OVER (partition by lbca.selling_chain_nbr,lbca.selling_store_nbr, lbca.register_nbr, lbca.transaction_dt, lbca.transaction_nbr, lbca.record_seq_nbr
order by lbca.extract_ts desc) as row_num
from
(SELECT
c.notes_seq_nbr
,c.note_type_desc
,c.free_form_note_desc
,c.selling_chain_nbr
,cast(c.selling_store_nbr as numeric) selling_store_nbr
,c.register_nbr
,c.transaction_nbr
,case when TRIM(c.transaction_dt)=''
 then null
 else PARSE_DATE("%Y-%m-%d",TRIM(c.transaction_dt)) end as transaction_dt
,case when cast(c.transaction_tm as string)='0' then '0'
else ( substr(cast(c.transaction_tm as string),1,2) ||':'|| substr(cast(c.transaction_tm as string),3,2) ||':'|| substr(cast(c.transaction_tm as string),5,2) ) end as transaction_tm
,c.detail_fee_seq_nbr
,c.detail_fee_ind
,c.cashier_nbr
,c.record_seq_nbr
,c.note_type_cd
,case when TRIM(c.last_update_ts)=''
 then null
 else PARSE_TIMESTAMP("%Y-%m-%d %H:%M:%S",c.last_update_ts,"America/New_York")
end as last_update_ts
,case when TRIM(c.extract_ts)=''
then null else PARSE_TIMESTAMP("%Y-%m-%d %H:%M:%S",c.extract_ts,"America/New_York")
end as extract_ts
from edl_landing.lb_sales_transaction_notes c
) lbca
) stg
where stg.row_num = 1
!
rc_check $? "Load incremental data from edl_landing into temp table"

#append the old records into the temporary table
bq query  --max_rows 1 --allow_large_results --append_table --destination_table edl_stage.lbca_sales_transaction_notes_new --use_legacy_sql=false <<!
select c.*
from edl_stage.plus_sales_transaction_notes c
left join edl_stage.lbca_sales_transaction_notes_new w
    on w.selling_chain_nbr=c.selling_chain_nbr
    and w.selling_store_nbr=c.selling_store_nbr
    and w.register_nbr=c.register_nbr
    and w.transaction_dt=c.transaction_dt
    and w.transaction_nbr=c.transaction_nbr
    and w.record_seq_nbr=c.record_seq_nbr
    where w.record_seq_nbr is null
!
rc_check $? "append legacy records into the temp table"

#cleansing and archival
bq cp --force edl_stage.plus_sales_transaction_notes edl_archive.plus_sales_transaction_notes
rc_check $? "archive copy"
bq cp --force edl_stage.lbca_sales_transaction_notes_new edl_stage.plus_sales_transaction_notes
rc_check $? "replace the temp table as the stage table"
bq rm --force edl_stage.lbca_sales_transaction_notes_new
rc_check $? "drop the temp table"

archive_bucket_files "gs://${default_bucket}/plus/edw/lb_sales_transaction_notes*.txt.gz*"
#archive_bucket_files "gs://${default_bucket}/plus/edw/ca_sales_transaction_notes*.txt.gz*"


