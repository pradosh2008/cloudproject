#!/usr/bin/bash
. ${HOME}/lib/set_env.sh
. ${HOME}/lib/common.sh

#creating the landing table
bq load --replace=true --source_format=CSV --skip_leading_rows=1 --quote='' --field_delimiter="|" \
        --schema=${schema_path}/edl_landing/lbca_sales_customer.json \
        edl_landing.lb_sales_customer \
        "gs://${default_bucket}/plus/edw/lb_sales_customer*.txt.gz"
rc_check $? "Load edl_landing LB Complete"

bq query --replace=true --max_rows 1 --allow_large_results --destination_table edl_stage.lbca_sales_customer_new --use_legacy_sql=false <<!
SELECT
cast(stg.selling_chain_nbr as INT64) selling_chain_nbr
,cast(stg.selling_store_nbr as NUMERIC) selling_store_nbr
,cast(stg.register_nbr as INT64) register_nbr
,cast(stg.transaction_nbr as INT64) transaction_nbr
,stg.transaction_dt
,cast(stg.customer_nbr as INT64) customer_nbr
,cast(stg.customer_seq_nbr as INT64) customer_seq_nbr
,stg.apply_matching_logic_cd as apply_matching_logic_cd
,cast(stg.club_member_nbr as NUMERIC) club_member_nbr
,stg.customer_external_type_cd as customer_external_type_cd
,cast(stg.customer_external_nbr as NUMERIC) customer_external_nbr
,stg.last_update_ts
,stg.ecommerce_customer_nbr as  ecommerce_customer_nbr
,stg.extract_ts
from 
(SELECT lbca.*
,ROW_NUMBER() OVER (partition by lbca.selling_chain_nbr,lbca.selling_store_nbr, lbca.register_nbr, lbca.transaction_dt, lbca.transaction_nbr
order by lbca.extract_ts desc) as row_num
from
(SELECT
trim(c.selling_chain_nbr) as selling_chain_nbr
,trim(c.selling_store_nbr) as selling_store_nbr
,trim(c.register_nbr) as register_nbr
,trim(c.transaction_nbr) as transaction_nbr
,case when TRIM(c.transaction_dt)=''
 then null
 else PARSE_DATE("%Y-%m-%d",TRIM(c.transaction_dt)) end as transaction_dt
,case when trim(c.customer_nbr)='' then null else c.customer_nbr end as customer_nbr
,trim(c.customer_seq_nbr) as customer_seq_nbr
,trim(c.apply_matching_logic_cd) as apply_matching_logic_cd
,case when trim(c.club_member_nbr)='' then null else c.club_member_nbr end as club_member_nbr
,trim(c.customer_external_type_cd) as customer_external_type_cd
,case when trim(c.customer_external_nbr)='' then null else c.customer_external_nbr end as customer_external_nbr
,case when TRIM(c.last_update_ts)=''
 then null
 else PARSE_TIMESTAMP("%Y-%m-%d %H:%M:%S",c.last_update_ts,"America/New_York")
end as last_update_ts
,trim(c.ecommerce_customer_nbr) as ecommerce_customer_nbr
,case when TRIM(c.extract_ts)=''
then null else PARSE_TIMESTAMP("%Y-%m-%d %H:%M:%S",c.extract_ts,"America/New_York")
end as extract_ts
from edl_landing.lb_sales_customer c
) lbca
) stg
where stg.row_num = 1
!
rc_check $? "Load incremental data from edl_landing into temp table"

#append the old records into the temporary table
bq query  --max_rows 1 --allow_large_results --append_table --destination_table edl_stage.lbca_sales_customer_new --use_legacy_sql=false <<!
select c.*
from edl_stage.plus_sales_customer c
left join edl_stage.lbca_sales_customer_new w
    on  w.selling_chain_nbr = c.selling_chain_nbr
    AND w.selling_store_nbr = c.selling_store_nbr
    AND w.register_nbr = c.register_nbr
    AND w.transaction_dt=c.transaction_dt
    AND w.transaction_nbr = c.transaction_nbr
    where w.transaction_nbr is null
!
rc_check $? "append legacy records into the temp table"

#cleansing and archival
bq cp --force edl_stage.plus_sales_customer edl_archive.plus_sales_customer
rc_check $? "archive copy"
bq cp --force edl_stage.lbca_sales_customer_new edl_stage.plus_sales_customer
rc_check $? "replace the temp table as the stage table"
bq rm --force edl_stage.lbca_sales_customer_new
rc_check $? "drop the temp table"

archive_bucket_files "gs://${default_bucket}/plus/edw/lb_sales_customer*.txt.gz*"
#archive_bucket_files "gs://${default_bucket}/plus/edw/ca_sales_customer*.txt.gz*"


