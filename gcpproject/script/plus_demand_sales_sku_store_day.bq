
#!/usr/bin/bash

. ${HOME}/lib/set_env.sh
. ${HOME}/lib/common.sh

#creating the landing table
bq load --replace=true --source_format=CSV --skip_leading_rows=1 --quote='' --field_delimiter="|" \
        --schema=${schema_path}/edl_landing/lbca_demand_sales_sku_store_day.json \
        edl_landing.lbca_demand_sales_sku_store_day \
        " gs://${default_bucket}/plus/edw/lb_demand_sales_sku_store_day*.txt.gz"
rc_check $? "EDL_LANDING load for LBCA_DEMAND_SALES_SKU_STORE_DAY Complete"

#loading the temporary table in staging
bq query --max_rows 1 --allow_large_results --destination_table edl_stage.plus_demand_sales_sku_store_day_new --use_legacy_sql=false <<!
SELECT 
  CURR.CHAIN_NBR
, CURR.SKU_NBR
, CURR.STORE_NBR
, CURR.TRANSACTION_DT
, CURR.DEMAND_ORDER_TYPE_CD
, CURR.SHIP_TO_HOME_OR_STORE_FLG
, CURR.PRICE_TYPE_CD
, CURR.DEMAND_NET_SALES_QTY
, CURR.DEMAND_NET_SALES_RTL
, CURR.DEMAND_NET_SALES_CST
, CURR.DEMAND_PRODUCTIVE_SALES_QTY
, CURR.DEMAND_PRODUCTIVE_SALES_RTL
, CURR.DEMAND_PRODUCTIVE_SALES_CST
, CURR.DEMAND_PRODUCTIVE_TRANS_CNT
, CURR.DEMAND_DISCOUNT_MARKDOWN_RTL
, CURR.DEMAND_MERCH_DISCOUNT_AMT
, CURR.DEMAND_NON_MERCH_DISCOUNT_AMT
, CURR.DEMAND_FEE_AMT
, CURR.DEMAND_CUSTOMER_PAID_TAX_AMT
, CURR.DEMAND_COMPANY_OWED_TAX_AMT
, CURR.STORE_FFLLM_NET_SLS_QTY
, CURR.STORE_FFLLM_NET_SLS_RTL
, CURR.STORE_FFLLM_NET_SLS_CST
, CURR.STORE_FFLLM_PRODTV_SLS_QTY
, CURR.STORE_FFLLM_PRODTV_SLS_RTL
, CURR.STORE_FFLLM_PRODTV_SLS_CST
, CURR.STORE_PRODUCTIVE_TRANS_CNT
, CURR.DC_FFLLM_NET_SLS_QTY
, CURR.DC_FFLLM_NET_SLS_RTL
, CURR.DC_FFLLM_NET_SLS_CST
, CURR.DC_FFLLM_PRODTV_SLS_QTY
, CURR.DC_FFLLM_PRODTV_SLS_RTL
, CURR.DC_FFLLM_PRODTV_SLS_CST
, CURR.DC_PRODUCTIVE_TRANS_CNT
, CURR.LAST_UPDATE_TS
, CURR.EXTRACT_TS
FROM (
       SELECT
         CAST(TRIM(d.CHAIN_NBR) AS INT64)                                                                                                                 AS CHAIN_NBR
       , TRIM(d.SKU_NBR)                                                                                                                                  AS SKU_NBR
       , CAST(TRIM(d.STORE_NBR) AS INT64)                                                                                                                 AS STORE_NBR
       , CASE WHEN TRIM(d.TRANSACTION_DT)                = '' THEN NULL ELSE PARSE_DATE("%Y-%m-%d",TRIM(d.TRANSACTION_DT))            END                 AS TRANSACTION_DT
       , TRIM(d.DEMAND_ORDER_TYPE_CD)                                                                                                                     AS DEMAND_ORDER_TYPE_CD
       , TRIM(d.SHIP_TO_HOME_OR_STORE_FLG)                                                                                                                AS SHIP_TO_HOME_OR_STORE_FLG
       , TRIM(d.PRICE_TYPE_CD)                                                                                                                            AS PRICE_TYPE_CD
       , CASE WHEN TRIM(d.DEMAND_NET_SALES_QTY)          = '' THEN NULL ELSE CAST(TRIM(d.DEMAND_NET_SALES_QTY)          AS INT64)     END                 AS DEMAND_NET_SALES_QTY
       , CASE WHEN TRIM(d.DEMAND_NET_SALES_RTL)          = '' THEN NULL ELSE CAST(TRIM(d.DEMAND_NET_SALES_RTL)          AS NUMERIC)   END                 AS DEMAND_NET_SALES_RTL
       , CASE WHEN TRIM(d.DEMAND_NET_SALES_CST)          = '' THEN NULL ELSE CAST(TRIM(d.DEMAND_NET_SALES_CST)          AS NUMERIC)   END                 AS DEMAND_NET_SALES_CST
       , CASE WHEN TRIM(d.DEMAND_PRODUCTIVE_SALES_QTY)   = '' THEN NULL ELSE CAST(TRIM(d.DEMAND_PRODUCTIVE_SALES_QTY)   AS INT64)     END                 AS DEMAND_PRODUCTIVE_SALES_QTY
       , CASE WHEN TRIM(d.DEMAND_PRODUCTIVE_SALES_RTL)   = '' THEN NULL ELSE CAST(TRIM(d.DEMAND_PRODUCTIVE_SALES_RTL)   AS NUMERIC)   END                 AS DEMAND_PRODUCTIVE_SALES_RTL
       , CASE WHEN TRIM(d.DEMAND_PRODUCTIVE_SALES_CST)   = '' THEN NULL ELSE CAST(TRIM(d.DEMAND_PRODUCTIVE_SALES_CST)   AS NUMERIC)   END                 AS DEMAND_PRODUCTIVE_SALES_CST
       , CASE WHEN TRIM(d.DEMAND_PRODUCTIVE_TRANS_CNT)   = '' THEN NULL ELSE CAST(TRIM(d.DEMAND_PRODUCTIVE_TRANS_CNT)   AS INT64)     END                 AS DEMAND_PRODUCTIVE_TRANS_CNT
       , CASE WHEN TRIM(d.DEMAND_DISCOUNT_MARKDOWN_RTL)  = '' THEN NULL ELSE CAST(TRIM(d.DEMAND_DISCOUNT_MARKDOWN_RTL)  AS NUMERIC)   END                 AS DEMAND_DISCOUNT_MARKDOWN_RTL
       , CASE WHEN TRIM(d.DEMAND_MERCH_DISCOUNT_AMT)     = '' THEN NULL ELSE CAST(TRIM(d.DEMAND_MERCH_DISCOUNT_AMT)     AS NUMERIC)   END                 AS DEMAND_MERCH_DISCOUNT_AMT
       , CASE WHEN TRIM(d.DEMAND_NON_MERCH_DISCOUNT_AMT) = '' THEN NULL ELSE CAST(TRIM(d.DEMAND_NON_MERCH_DISCOUNT_AMT) AS NUMERIC)   END                 AS DEMAND_NON_MERCH_DISCOUNT_AMT
       , CASE WHEN TRIM(d.DEMAND_FEE_AMT)                = '' THEN NULL ELSE CAST(TRIM(d.DEMAND_FEE_AMT)                AS NUMERIC)   END                 AS DEMAND_FEE_AMT
       , CASE WHEN TRIM(d.DEMAND_CUSTOMER_PAID_TAX_AMT)  = '' THEN NULL ELSE CAST(TRIM(d.DEMAND_CUSTOMER_PAID_TAX_AMT)  AS NUMERIC)   END                 AS DEMAND_CUSTOMER_PAID_TAX_AMT
       , CASE WHEN TRIM(d.DEMAND_COMPANY_OWED_TAX_AMT)   = '' THEN NULL ELSE CAST(TRIM(d.DEMAND_COMPANY_OWED_TAX_AMT)   AS NUMERIC)   END                 AS DEMAND_COMPANY_OWED_TAX_AMT
       , CASE WHEN TRIM(d.STORE_FFLLM_NET_SLS_QTY)       = '' THEN NULL ELSE CAST(TRIM(d.STORE_FFLLM_NET_SLS_QTY)       AS INT64)     END                 AS STORE_FFLLM_NET_SLS_QTY
       , CASE WHEN TRIM(d.STORE_FFLLM_NET_SLS_RTL)       = '' THEN NULL ELSE CAST(TRIM(d.STORE_FFLLM_NET_SLS_RTL)       AS NUMERIC)   END                 AS STORE_FFLLM_NET_SLS_RTL
       , CASE WHEN TRIM(d.STORE_FFLLM_NET_SLS_CST)       = '' THEN NULL ELSE CAST(TRIM(d.STORE_FFLLM_NET_SLS_CST)       AS NUMERIC)   END                 AS STORE_FFLLM_NET_SLS_CST
       , CASE WHEN TRIM(d.STORE_FFLLM_PRODTV_SLS_QTY)    = '' THEN NULL ELSE CAST(TRIM(d.STORE_FFLLM_PRODTV_SLS_QTY)    AS INT64)     END                 AS STORE_FFLLM_PRODTV_SLS_QTY
       , CASE WHEN TRIM(d.STORE_FFLLM_PRODTV_SLS_RTL)    = '' THEN NULL ELSE CAST(TRIM(d.STORE_FFLLM_PRODTV_SLS_RTL)    AS NUMERIC)   END                 AS STORE_FFLLM_PRODTV_SLS_RTL
       , CASE WHEN TRIM(d.STORE_FFLLM_PRODTV_SLS_CST)    = '' THEN NULL ELSE CAST(TRIM(d.STORE_FFLLM_PRODTV_SLS_CST)    AS NUMERIC)   END                 AS STORE_FFLLM_PRODTV_SLS_CST
       , CASE WHEN TRIM(d.STORE_PRODUCTIVE_TRANS_CNT)    = '' THEN NULL ELSE CAST(TRIM(d.STORE_PRODUCTIVE_TRANS_CNT)    AS INT64)     END                 AS STORE_PRODUCTIVE_TRANS_CNT
       , CASE WHEN TRIM(d.DC_FFLLM_NET_SLS_QTY)          = '' THEN NULL ELSE CAST(TRIM(d.DC_FFLLM_NET_SLS_QTY)          AS INT64)     END                 AS DC_FFLLM_NET_SLS_QTY
       , CASE WHEN TRIM(d.DC_FFLLM_NET_SLS_RTL)          = '' THEN NULL ELSE CAST(TRIM(d.DC_FFLLM_NET_SLS_RTL)          AS NUMERIC)   END                 AS DC_FFLLM_NET_SLS_RTL
       , CASE WHEN TRIM(d.DC_FFLLM_NET_SLS_CST)          = '' THEN NULL ELSE CAST(TRIM(d.DC_FFLLM_NET_SLS_CST)          AS NUMERIC)   END                 AS DC_FFLLM_NET_SLS_CST
       , CASE WHEN TRIM(d.DC_FFLLM_PRODTV_SLS_QTY)       = '' THEN NULL ELSE CAST(TRIM(d.DC_FFLLM_PRODTV_SLS_QTY)       AS INT64)     END                 AS DC_FFLLM_PRODTV_SLS_QTY
       , CASE WHEN TRIM(d.DC_FFLLM_PRODTV_SLS_RTL)       = '' THEN NULL ELSE CAST(TRIM(d.DC_FFLLM_PRODTV_SLS_RTL)       AS NUMERIC)   END                 AS DC_FFLLM_PRODTV_SLS_RTL
       , CASE WHEN TRIM(d.DC_FFLLM_PRODTV_SLS_CST)       = '' THEN NULL ELSE CAST(TRIM(d.DC_FFLLM_PRODTV_SLS_CST)       AS NUMERIC)   END                 AS DC_FFLLM_PRODTV_SLS_CST
       , CASE WHEN TRIM(d.DC_PRODUCTIVE_TRANS_CNT)       = '' THEN NULL ELSE CAST(TRIM(d.DC_PRODUCTIVE_TRANS_CNT)       AS INT64)     END                 AS DC_PRODUCTIVE_TRANS_CNT
       , CASE WHEN TRIM(d.LAST_UPDATE_TS)                = '' THEN NULL ELSE PARSE_TIMESTAMP("%Y-%m-%d %H:%M:%S",d.LAST_UPDATE_TS,"America/New_York") END AS LAST_UPDATE_TS
       , CASE WHEN TRIM(d.EXTRACT_TS)                    = '' THEN NULL ELSE PARSE_TIMESTAMP("%Y-%m-%d %H:%M:%S",d.EXTRACT_TS,"America/New_York")     END AS EXTRACT_TS
       , ROW_NUMBER() OVER (PARTITION BY  d.CHAIN_NBR
                                        , d.SKU_NBR
                                        , d.STORE_NBR
                                        , d.TRANSACTION_DT
                                        , d.DEMAND_ORDER_TYPE_CD
                                        , d.SHIP_TO_HOME_OR_STORE_FLG
                                        , d.PRICE_TYPE_CD 
                             ORDER BY d.LAST_UPDATE_TS desc
                            )                                           as ROW_NUM
       FROM edl_landing.lbca_demand_sales_sku_store_day d
     ) CURR
where ROW_NUM = 1
!
rc_check $? "Load incremental data from edl_landing into temp table"

#Merge/UPSert old records into new stage table
bq query  --max_rows 1 --allow_large_results --append_table --destination_table edl_stage.plus_demand_sales_sku_store_day_new --use_legacy_sql=false <<!
select stg.*
from edl_stage.plus_demand_sales_sku_store_day stg
left join (
            select 
            TRANSACTION_DT
            from edl_stage.plus_demand_sales_sku_store_day_new
            group by TRANSACTION_DT
          ) temp
          ON TEMP.TRANSACTION_DT = STG.TRANSACTION_DT
where TEMP.TRANSACTION_DT is null
!
rc_check $? "Merge or UPSert old records into new stage table"

#cleansing and archival
bq cp --force edl_stage.plus_demand_sales_sku_store_day edl_archive.plus_demand_sales_sku_store_day
rc_check $? "archive copy"
bq cp --force edl_stage.plus_demand_sales_sku_store_day_new edl_stage.plus_demand_sales_sku_store_day
rc_check $? "replace the temp table as the stage table"
bq rm --force edl_stage.plus_demand_sales_sku_store_day_new
rc_check $? "drop the temp table"

##Archive Files in Bucket which are processed or Consumed
archive_bucket_files "gs://${default_bucket}/plus/edw/lb_demand_sales_sku_store_day*.txt.gz"


